#ifndef _fingerprint_h_
#define _fingerprint_h_


#include "avr/io.h"
#include "util/delay.h"



unsigned char genimg_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};
unsigned char genchar1_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};
unsigned char genchar2_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};
unsigned char gentemp_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};
unsigned char emptylib_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};
unsigned char deletetemp_ack[12]={0xEF,0X01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0X00,0x00,0X0A};

void uartinit(void)
{
	UBRR0L=0x0C;
	UCSR0B |= (1 << RXEN0 ) | (1 << TXEN0 )| (1<<RXCIE0);

}


uart_trans(char tx_data)
{
	while (( UCSR0A & (1 << UDRE0 )) == 0);
	UDR0 = tx_data ;
	
}

void stransmit0(char *p)
{
	while(*p) uart_trans(*p++);
}

void gentempnum()
{
	uart_trans(0xEF);
	uart_trans(0x01);
	uart_trans(0xFF);
	uart_trans(0xFF);
	uart_trans(0xFF);
	uart_trans(0xFF);
	uart_trans(0x01);
	uart_trans(0x00);
	uart_trans(0x03);
	uart_trans(0x1D);
	uart_trans(0x00);
	uart_trans(0x21);
	_delay_ms(50);
}

void emptylib()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x03);uart_trans(0x0d);uart_trans(0x00);uart_trans(0x11);
	_delay_ms(50);
	
}

void genimg()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x03);uart_trans(0x01);uart_trans(0x00);uart_trans(0x05);
	_delay_ms(50);
}

void genchar1()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x04);uart_trans(0x02);uart_trans(0x01);uart_trans(0x00);uart_trans(0x08);
	 _delay_ms(50); 
}

void genchar2()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x04);uart_trans(0x02);uart_trans(0x02);uart_trans(0x00);uart_trans(0x09);
	_delay_ms(50);
	
}

void gentemp()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x03);uart_trans(0x05);uart_trans(0x00);uart_trans(0x09);
	_delay_ms(50);
	 
}



void searchfing()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x08);uart_trans(0x04);uart_trans(0x01);uart_trans(0x00);uart_trans(0x00);uart_trans(0x00);uart_trans(0x0F);uart_trans(0x00);uart_trans(0x1d);
	_delay_ms(50);
	
}

void deletetemp()
{
	uart_trans(0xEF);uart_trans(0x01);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);uart_trans(0xFF);
	uart_trans(0x01);uart_trans(0x00);uart_trans(0x07);uart_trans(0x0c);uart_trans(0x00);uart_trans(0x03);uart_trans(0x00);uart_trans(0x01);uart_trans(0x00);;uart_trans(0x18);
	_delay_ms(50);	
}


#endif